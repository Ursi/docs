{
	"name": "web-gui",
	"sections": [
		{
			"name": "Exported",
			"entities": [
				{
					"type": "function",
					"name": "charWrap",
					"parameters": [
						{
							"name": "node",
							"type": "Node"
						},
						{
							"name": "options",
							"type": "Object",
							"parameters": [
								{
									"name": "elem",
									"type": "string",
									"default": "`span`",
									"description": "the type of element the characters will be surrounded with"
								},
								{
									"name": "classes",
									"type": "Function",
									"parameters": [
										{
											"name": "char",
											"type": "string",
											"description": "the characters that will be the text content of the created element"
										},
										{
											"name": "count",
											"type": "number",
											"description": "the 0-indexed count of the element"
										},
										{
											"name": "path",
											"type": "Array",
											"description": "an array containing the surrounding elements of the current characters, beginning with <code>node</code>"
										}
									],
									"returns": {
										"type": "Array",
										"description": "returns an array of the classes that will be applied to the element"
									}
								},
								{
									"name": "data",
									"type": "Function",
									"parameters": [
										{
											"name": "char",
											"type": "string",
											"description": "the characters that will be the text content of the created element"
										},
										{
											"name": "count",
											"type": "number",
											"description": "the 0-indexed count of the element"
										},
										{
											"name": "path",
											"type": "Array",
											"description": "an array containing the surrounding elements of the current characters, beginning with <code>node</code>"
										}
									],
									"returns": {
										"type": "Array",
										"description": "an array of arrays of length 2, which contain the data property name at index 0, and the data property value at index 1"
									}
								},
								{
									"name": "listeners",
									"type": "Function",
									"parameters": [
										{
											"name": "char",
											"type": "string",
											"description": "the characters that will be the text content of the created element"
										},
										{
											"name": "count",
											"type": "number",
											"description": "the 0-indexed count of the element"
										},
										{
											"name": "path",
											"type": "Array",
											"description": "an array containing the surrounding elements of the current characters, beginning with <code>node</code>"
										}
									],
									"returns": {
										"type": "Array",
										"description": "an array of arrays of length 2, which contain the event at index 0, and the listener at index 1"
									}
								}
							]
						}
					]
				},
				{
					"type": "function",
					"name": "empty",
					"parameters": [
						{
							"name": "elem",
							"type": "HTMLElement"
						}
					],
					"description": "removes all the children of <code>elem</code>"
				},
				{
					"type": "function",
					"name": "place",
					"parameters": [
						{
							"name": "elem",
							"type": "HTMLElement",
							"description": "the element that will be placed"
						},
						{
							"name": "options",
							"type": "Object",
							"parameters": [
								{
									"name": "reference",
									"type": "HTMLElement",
									"default": "document.body",
									"description": "an element used for positioning <code>elem</code>"
								},
								{
									"name": "xe",
									"type": "Number",
									"default": 0.5,
									"description": "a value from 0 to 1, (0 being the leftmost side of the element and 1 being the rightmost side) that is matched up with the x value specified by <code>xr</code>"
								},
								{
									"name": "xr",
									"type": "Number",
									"default": 0.5,
									"description": "a value from 0 to 1, (0 being the leftmost side of the element and 1 being the rightmost side) that is matched up with the x value specified by <code>xe</code>"
								},
								{
									"name": "ye",
									"type": "Number",
									"default": 0.5,
									"description": "a value from 0 to 1, (0 being the topmost side of the element and 1 being the bottommost side) that is matched up with the y value specified by <code>yr</code>"
								},
								{
									"name": "yr",
									"type": "Number",
									"default": 0.5,
									"description": "a value from 0 to 1, (0 being the topmost side of the element and 1 being the bottommost side) that is matched up with the y value specified by <code>ye</code>"
								},
								{
									"name": "zIndex",
									"type": "Number",
									"default": "Number.MAX_SAFE_INTEGER",
									"description": "the value of the CSS <code>z-index</code> property of the background element"
								}
							]
						}
					]
				},
				{
					"type": "function",
					"name": "popup",
					"parameters": [
						{
							"name": "elem",
							"type": "HTMLElement",
							"description": "the element that will be popped up"
						},
						{
							"name": "options",
							"type": "Object",
							"parameters": [
								{
									"name": "reference",
									"type": "HTMLElement",
									"description": "an element used for positioning the popup, by default the viewport is used"
								},
								{
									"name": "xe",
									"type": "Number",
									"default": 0.5,
									"description": "a value from 0 to 1, (0 being the leftmost side of the element and 1 being the rightmost side) that is matched up with the x value specified by <code>xr</code>"
								},
								{
									"name": "xr",
									"type": "Number",
									"default": 0.5,
									"description": "a value from 0 to 1, (0 being the leftmost side of the element and 1 being the rightmost side) that is matched up with the x value specified by <code>xe</code>"
								},
								{
									"name": "ye",
									"type": "Number",
									"default": 0.5,
									"description": "a value from 0 to 1, (0 being the topmost side of the element and 1 being the bottommost side) that is matched up with the y value specified by <code>yr</code>"
								},
								{
									"name": "yr",
									"type": "Number",
									"default": 0.5,
									"description": "a value from 0 to 1, (0 being the topmost side of the element and 1 being the bottommost side) that is matched up with the y value specified by <code>ye</code>"
								},
								{
									"name": "dim",
									"type": "Number",
									"default": 85,
									"description": "the opacity of the black background from 0â€“255"
								},
								{
									"name": "boxShadow",
									"type": "String",
									"default": "`0 0 10px`",
									"description": "the value of the CSS <code>box-shadow</code> property of the popup"
								},
								{
									"name": "zIndex",
									"type": "Number",
									"default": "Number.MAX_SAFE_INTEGER",
									"description": "the value of the CSS <code>z-index</code> property of the background element"
								}
							]
						},
						{
							"name": "callback",
							"type": "Function",
							"default": "background => background.remove()",
							"description": "a callback to be executed when clicking outside of the popup",
							"parameters": [
								{
									"name": "this",
									"type": "HTMLElement",
									"description": "the <code>elem</code> parameter passed into <code>popup</code>\n(Removing this element will remove the background element as well.)"
								},
								{
									"name": "background",
									"type": "HTMLElement",
									"description": "the background element"
								},
								{
									"name": "reference",
									"type": "HTMLElement",
									"description": "the value of <code>reference</code> options"
								}
							]
						}
					]
				},
				{
					"type": "function",
					"name": "transWait",
					"parameters": [
						{
							"name": "elem",
							"type": "HTMLElement"
						}
					],
					"returns": {
						"type": "Promise",
						"description": "a promise that resolves when <code>elem</code> emits a <code>transitionend</code> event"
					}
				},
				{
					"type": "function",
					"name": "waitFrames",
					"parameters": [
						{
							"name": "frames",
							"type": "number"
						}
					],
					"returns": {
						"type": "Promise",
						"description": "a promise that resolves after <code>frames</code> frames have been rendered"
					}
				}
			]
		}
	]
}
